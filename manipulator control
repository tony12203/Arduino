#include "Wire.h"     // для работы с шиной I2C
#include "I2Cdev.h"     // для упрощения работы с гироскопом
#include "MPU6050.h"      // библиотека для работы с гироскопом MPU6050
#include <SPI.h>     // подключение радиомодуля по интерфейсу SPI
#include <nRF24L01.h>     // для управления радиомодулем
#include <RF24.h>     // для управления модулем
#define CE_PIN 9     // объявление номера пина для задания режима работы радиомодуля
#define CSN_PIN 10      // объявление номера пина для задания режима общения с микроконтроллером

const uint64_t pipe = 0xE8E8F0F0E1LL;     // адрес канада передачи
RF24 radio(CE_PIN, CSN_PIN);     // объект radio для работы с библиотекой RF24 с выставлением пинов на модуль
MPU6050 mpu;     // создание экземпляра MPU6050
int16_t ax, ay, az;     // 16-бит тип со знаком, определение значений ускорения
int16_t gx, gy, gz;     // определение значений гироскопа
int datos[3];     // массив из трех элементов для хранения данных

void setup(void)
{
  Wire.begin();     // подключение Ардуино к шине I2C в роли ведущего устройства
  Serial.begin(38400);     // скорость передачи данных по последовательному интерфейсу в бодах
  Serial.println("Инициализация MPU"); 
  mpu.initialize();     // инициализация датчика MPU
  Serial.println("Тестирование соединения устройства"); 
  Serial.println(mpu.testConnection() ? "MPU6050 подключено" : "MPU6050 не подключено");     // вывод тестового сообщения о подключении модуля MPU
  radio.begin();     // инициализация работы модуля nRF24L01
  radio.openWritingPipe(pipe);     // открываем радиоканал передачи  
}
void loop() {
  mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);     // считывание 6 значений в 6 переменных
  datos[0] = map(ay, -17000, 17000, 0, 1000);     // изменение диапазона значений 
  datos[1] = map(ax, -17000, 17000, 0, 1000);
  bool ok = radio.write(datos, sizeof(datos));     // отправка данных и указание количества байт пакета
  Serial.println(datos[0]);     // вывод полученных данных
}
